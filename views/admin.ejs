<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Manage your shortened URLs and track their performance">
    <meta name="theme-color" content="#000000">
    <title>Admin Panel</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23238636'><path d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.237 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'/></svg>">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: #000000;
            color: #ffffff;
        }
        nav {
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .nav-particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            pointer-events: none;
            background: transparent;
        }
        #particles-js {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 0;
            opacity: 0.8;
        }
        .content-wrapper {
            position: relative;
            z-index: 1;
        }
        .nav-content {
            position: relative;
            z-index: 1;
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            position: relative;
            overflow: hidden;
        }
        .glass-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: inherit;
            padding: 1px;
            background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0), transparent);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 0;
        }
        .glass-card:hover::before {
            opacity: 1;
            animation: glow 2s ease-in-out infinite;
        }
        @keyframes glow {
            0% {
                background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.3), transparent);
            }
            50% {
                background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.3), transparent);
            }
            100% {
                background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0), transparent);
            }
        }
        .glass-card::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 0;
        }
        .glass-card:hover::after {
            opacity: 1;
        }
        .stat-icon {
            position: relative;
            z-index: 1;
        }
        .stat-icon::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100%;
            height: 100%;
            background: radial-gradient(circle, rgba(59, 130, 246, 0.2) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: inherit;
            pointer-events: none;
            z-index: 0;
        }
        .glass-card:hover .stat-icon::before {
            opacity: 1;
        }
        .glass-card > * {
            position: relative;
            z-index: 1;
        }
        button, a, input, select {
            position: relative;
            z-index: 2;
        }
        .glass-input {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        .glass-input:focus {
            border-color: rgba(255, 255, 255, 0.2);
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
        }
        /* Custom select styling */
        select.glass-input {
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            cursor: pointer;
        }
        select.glass-input option {
            background-color: #000000;
            color: white;
            padding: 10px;
        }
        select.glass-input:focus {
            background-color: rgba(0, 0, 0, 0.7);
        }
        /* Remove default select arrow in Firefox */
        select.glass-input::-ms-expand {
            display: none;
        }
        /* Remove default select arrow in IE */
        select.glass-input::-ms-expand {
            display: none;
        }
        /* Remove default select arrow in Chrome/Safari */
        select.glass-input {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }
        .hover-scale {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .hover-scale:hover {
            transform: scale(1.02);
        }
        .fade-in {
            animation: fadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .slide-in {
            animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .delay-0 { animation-delay: 0s; }
        .delay-1 { animation-delay: 0.1s; }
        .delay-2 { animation-delay: 0.2s; }
        .delay-3 { animation-delay: 0.3s; }
        .delay-4 { animation-delay: 0.4s; }
        .delay-5 { animation-delay: 0.5s; }
        @keyframes slideIn {
            from { transform: translateX(-30px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        .pulse {
            animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        .gradient-text {
            background: linear-gradient(45deg, #ffffff, #a0a0a0);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .nav-link {
            position: relative;
        }
        .nav-link::after {
            content: '';
            position: absolute;
            width: 0;
            height: 1px;
            bottom: -2px;
            left: 0;
            background-color: #ffffff;
            transition: width 0.3s ease;
        }
        .nav-link:hover::after {
            width: 100%;
        }
        .expiry-badge {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.7);
            transition: all 0.3s ease;
        }
        .expiry-badge:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
            box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
        }
        .expiry-badge.expired {
            background: rgba(239, 68, 68, 0.1);
            border-color: rgba(239, 68, 68, 0.2);
            color: rgba(239, 68, 68, 0.8);
        }
        .expiry-badge.expired:hover {
            background: rgba(239, 68, 68, 0.15);
            border-color: rgba(239, 68, 68, 0.3);
            box-shadow: 0 0 15px rgba(239, 68, 68, 0.2);
        }
        .expiry-badge.warning {
            background: rgba(234, 179, 8, 0.1);
            border-color: rgba(234, 179, 8, 0.2);
            color: rgba(234, 179, 8, 0.8);
        }
        .expiry-badge.warning:hover {
            background: rgba(234, 179, 8, 0.15);
            border-color: rgba(234, 179, 8, 0.3);
            box-shadow: 0 0 15px rgba(234, 179, 8, 0.2);
        }
        .delete-btn {
            color: rgba(239, 68, 68, 0.7);
            transition: all 0.3s ease;
            position: relative;
        }
        .delete-btn:hover {
            color: rgba(239, 68, 68, 1);
            transform: scale(1.1);
        }
        .delete-btn::after {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(239, 68, 68, 0.2) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }
        .delete-btn:hover::after {
            opacity: 1;
        }
        .delete-btn:active {
            transform: scale(0.95);
        }
        .delete-all-btn {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: rgba(239, 68, 68, 0.8);
            transition: all 0.3s ease;
        }
        .delete-all-btn:hover {
            background: rgba(239, 68, 68, 0.15);
            border-color: rgba(239, 68, 68, 0.3);
            box-shadow: 0 0 15px rgba(239, 68, 68, 0.2);
            transform: translateY(-1px);
        }
        .delete-all-btn:active {
            transform: translateY(0);
        }
        #snow-particles {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 0;
            opacity: 0.3;
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Navigation -->
    <nav class="fixed w-full z-50 bg-black/80 backdrop-blur-md border-b border-white/5">
        <div class="nav-particles">
            <div id="particles-js"></div>
        </div>
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 nav-content">
            <div class="flex justify-between h-20">
                <div class="flex items-center">
                    <a href="/" class="text-2xl font-bold gradient-text hover-scale">
                        <i class="fas fa-link mr-2"></i>Root URL
                    </a>
                </div>
                <div class="flex items-center space-x-8">
                    <span class="text-gray-400 hidden sm:inline">Welcome, <%= user.username %></span>
                    <a href="/" class="nav-link text-gray-400 hover:text-white transition-colors duration-300">
                        <i class="fas fa-home mr-2"></i> <span class="hidden sm:inline">Dashboard</span>
                    </a>
                    <a href="/auth/logout" class="nav-link text-gray-400 hover:text-white transition-colors duration-300">
                        <i class="fas fa-sign-out-alt mr-2"></i> <span class="hidden sm:inline">Logout</span>
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-32 relative">
        <div id="snow-particles" class="absolute inset-0 pointer-events-none"></div>
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            <div class="glass-card rounded-2xl p-8 hover-scale fade-in" style="animation-delay: 0.1s">
                <div class="flex items-center">
                    <div class="p-4 rounded-2xl bg-white/5 pulse stat-icon">
                        <i class="fas fa-link text-white text-3xl"></i>
                    </div>
                    <div class="ml-6">
                        <h3 class="text-gray-400 text-sm uppercase tracking-wider">Total URLs</h3>
                        <p class="text-3xl font-bold mt-1" id="total-urls"><%= urls.length %></p>
                    </div>
                </div>
            </div>
            <div class="glass-card rounded-2xl p-8 hover-scale fade-in" style="animation-delay: 0.2s">
                <div class="flex items-center">
                    <div class="p-4 rounded-2xl bg-white/5 pulse stat-icon">
                        <i class="fas fa-mouse-pointer text-white text-3xl"></i>
                    </div>
                    <div class="ml-6">
                        <h3 class="text-gray-400 text-sm uppercase tracking-wider">Total Clicks</h3>
                        <p class="text-3xl font-bold mt-1" id="total-clicks"><%= urls.reduce((sum, url) => sum + url.clicks, 0) %></p>
                    </div>
                </div>
            </div>
            <div class="glass-card rounded-2xl p-8 hover-scale fade-in" style="animation-delay: 0.3s">
                <div class="flex items-center">
                    <div class="p-4 rounded-2xl bg-white/5 pulse stat-icon">
                        <i class="fas fa-clock text-white text-3xl"></i>
                    </div>
                    <div class="ml-6">
                        <h3 class="text-gray-400 text-sm uppercase tracking-wider">Active URLs</h3>
                        <p class="text-3xl font-bold mt-1" id="active-urls"><%= urls.filter(url => new Date(url.expiresAt) > new Date()).length %></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- URLs Table -->
        <div class="glass-card rounded-2xl overflow-hidden mb-12 fade-in" style="animation-delay: 0.4s">
            <div class="p-8 border-b border-white/5">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold gradient-text">Your URLs</h2>
                    <button onclick="showDeleteAllModal()" 
                            class="delete-all-btn px-6 py-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-red-500/20 transition-all duration-300">
                        <i class="fas fa-trash-alt mr-2"></i>Delete All
                    </button>
                    <button onclick="showDeleteAccountModal()" 
                            class="delete-all-btn px-6 py-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-red-500/20 transition-all duration-300 mt-4">
                        <i class="fas fa-user-slash mr-2"></i>Delete My Account
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto">
                <!-- Mobile View -->
                <div class="md:hidden">
                    <% urls.forEach((url, index) => { %>
                        <div class="p-6 border-b border-white/5 slide-in delay-<%= Math.min(index, 5) %>" 
                             data-url-id="<%= url._id %>">
                            <div class="space-y-2">
                                <div>
                                    <span class="text-gray-400 text-xs">Original URL:</span>
                                    <div class="text-sm text-gray-300 truncate"><%= url.fullUrl %></div>
                                </div>
                                <div>
                                    <span class="text-gray-400 text-xs">Short URL:</span>
                                    <div class="text-sm text-gray-300 break-all">
                                        <span id="shortUrl-<%= url._id %>"><%= url.shortUrl %></span>
                                    </div>
                                </div>
                                <div class="flex justify-between">
                                    <div>
                                        <span class="text-gray-400 text-xs">Clicks:</span>
                                        <div class="text-sm text-gray-300"><%= url.clicks %></div>
                                    </div>
                                    <div>
                                        <span class="text-gray-400 text-xs">Created:</span>
                                        <div class="text-sm text-gray-300">
                                            <%= new Date(url.createdAt).toLocaleDateString() %>
                                            <span class="text-gray-400 text-xs ml-2">
                                                <% 
                                                    const createdDiff = new Date() - new Date(url.createdAt);
                                                    const createdDays = Math.floor(createdDiff / (1000 * 60 * 60 * 24));
                                                    const createdHours = Math.floor((createdDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                                    const createdMinutes = Math.floor((createdDiff % (1000 * 60 * 60)) / (1000 * 60));
                                                    let createdTimeAgo = '';
                                                    if (createdDays > 0) createdTimeAgo += `${createdDays}d `;
                                                    if (createdHours > 0) createdTimeAgo += `${createdHours}h `;
                                                    if (createdMinutes > 0) createdTimeAgo += `${createdMinutes}m`;
                                                    if (!createdTimeAgo) createdTimeAgo = 'Just now';
                                                %>
                                                (<%= createdTimeAgo %> ago)
                                            </span>
                                        </div>
                                    </div>
                                    <div>
                                        <span class="text-gray-400 text-xs">Expires:</span>
                                        <div class="text-sm text-gray-300">
                                            <%= new Date(url.expiresAt).toLocaleDateString() %>
                                            <span class="expiry-badge ml-2 <%= new Date(url.expiresAt) < new Date() ? 'expired' : (new Date(url.expiresAt) - new Date()) < 86400000 ? 'warning' : '' %>">
                                                <% 
                                                    const expiresDiff = new Date(url.expiresAt) - new Date();
                                                    const expiresDays = Math.floor(expiresDiff / (1000 * 60 * 60 * 24));
                                                    const expiresHours = Math.floor((expiresDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                                    const expiresMinutes = Math.floor((expiresDiff % (1000 * 60 * 60)) / (1000 * 60));
                                                    let expiresTimeLeft = '';
                                                    if (expiresDays > 0) expiresTimeLeft += `${expiresDays}d `;
                                                    if (expiresHours > 0) expiresTimeLeft += `${expiresHours}h `;
                                                    if (expiresMinutes > 0) expiresTimeLeft += `${expiresMinutes}m`;
                                                    if (!expiresTimeLeft) expiresTimeLeft = 'Expired';
                                                %>
                                                <%= expiresTimeLeft %>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex justify-end space-x-3 pt-2">
                                    <button onclick="copyToClipboard('<%= url.shortUrl %>')" 
                                            class="text-blue-400 hover:text-blue-300">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                    <button onclick="deleteUrl('<%= url._id %>')" 
                                            class="delete-btn text-red-400 hover:text-red-300">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Desktop View -->
                <table class="w-full hidden md:table">
                    <thead>
                        <tr class="border-b border-white/5">
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Original URL</th>
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Short URL</th>
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Clicks</th>
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Created</th>
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Expires</th>
                            <th class="px-8 py-6 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-white/5">
                        <% urls.forEach((url, index) => { %>
                            <tr class="hover:bg-white/5 transition-colors duration-300 slide-in delay-<%= Math.min(index, 5) %>" 
                                data-url-id="<%= url._id %>" 
                                data-expires-at="<%= url.expiresAt %>">
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div class="text-sm text-gray-300 truncate max-w-xs">
                                        <%= url.fullUrl %>
                                    </div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div class="text-sm text-gray-300">
                                        <span id="shortUrl-<%= url._id %>"><%= url.shortUrl %></span>
                                    </div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div class="text-sm text-gray-300"><%= url.clicks %></div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div class="text-sm text-gray-300">
                                        <%= new Date(url.createdAt).toLocaleDateString() %>
                                        <span class="text-gray-400 text-xs ml-2">
                                            <% 
                                                const createdDiff = new Date() - new Date(url.createdAt);
                                                const createdDays = Math.floor(createdDiff / (1000 * 60 * 60 * 24));
                                                const createdHours = Math.floor((createdDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                                const createdMinutes = Math.floor((createdDiff % (1000 * 60 * 60)) / (1000 * 60));
                                                let createdTimeAgo = '';
                                                if (createdDays > 0) createdTimeAgo += `${createdDays}d `;
                                                if (createdHours > 0) createdTimeAgo += `${createdHours}h `;
                                                if (createdMinutes > 0) createdTimeAgo += `${createdMinutes}m`;
                                                if (!createdTimeAgo) createdTimeAgo = 'Just now';
                                            %>
                                            (<%= createdTimeAgo %> ago)
                                        </span>
                                    </div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap">
                                    <div class="text-sm text-gray-300">
                                        <%= new Date(url.expiresAt).toLocaleDateString() %>
                                        <span class="expiry-badge ml-2 <%= new Date(url.expiresAt) < new Date() ? 'expired' : (new Date(url.expiresAt) - new Date()) < 86400000 ? 'warning' : '' %>">
                                            <% 
                                                const expiresDiff = new Date(url.expiresAt) - new Date();
                                                const expiresDays = Math.floor(expiresDiff / (1000 * 60 * 60 * 24));
                                                const expiresHours = Math.floor((expiresDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                                const expiresMinutes = Math.floor((expiresDiff % (1000 * 60 * 60)) / (1000 * 60));
                                                let expiresTimeLeft = '';
                                                if (expiresDays > 0) expiresTimeLeft += `${expiresDays}d `;
                                                if (expiresHours > 0) expiresTimeLeft += `${expiresHours}h `;
                                                if (expiresMinutes > 0) expiresTimeLeft += `${expiresMinutes}m`;
                                                if (!expiresTimeLeft) expiresTimeLeft = 'Expired';
                                            %>
                                            <%= expiresTimeLeft %>
                                        </span>
                                    </div>
                                </td>
                                <td class="px-8 py-6 whitespace-nowrap text-sm text-gray-300">
                                    <button onclick="copyToClipboard('<%= url.shortUrl %>')" 
                                            class="text-blue-400 hover:text-blue-300 mr-3">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                    <button onclick="deleteUrl('<%= url._id %>')" 
                                            class="delete-btn text-red-400 hover:text-red-300">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Create URL Section -->
        <div class="glass-card rounded-2xl p-8 fade-in" style="animation-delay: 0.5s">
            <h2 class="text-2xl font-bold mb-8 gradient-text">Create New URL</h2>
            <form id="urlForm" class="space-y-8">
                <div>
                    <label for="fullUrl" class="block text-sm font-medium text-gray-400 mb-3 uppercase tracking-wider">Enter your URL</label>
                    <input type="url" name="fullUrl" id="fullUrl" required
                        class="w-full px-6 py-4 rounded-xl glass-input text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-300"
                        placeholder="https://example.com">
                </div>

                <div>
                    <label for="customShortCode" class="block text-sm font-medium text-gray-400 mb-3 uppercase tracking-wider">Custom Short Code (optional)</label>
                    <input type="text" name="customShortCode" id="customShortCode"
                        class="w-full px-6 py-4 rounded-xl glass-input text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-300"
                        placeholder="Enter your custom code (e.g., mylink, docs, etc.)">
                    <p class="mt-2 text-sm text-gray-500">Leave empty for auto-generated code</p>
                </div>

                <div>
                    <label for="expiry" class="block text-sm font-medium text-gray-400 mb-3 uppercase tracking-wider">Expiry</label>
                    <div class="relative">
                        <select name="expiry" id="expiry" required
                            class="w-full px-6 py-4 rounded-xl glass-input text-white focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-300 appearance-none">
                            <option value="1m">1 Minute</option>
                            <option value="1h">1 Hour</option>
                            <option value="6h">6 Hours</option>
                            <option value="1d">1 Day</option>
                            <option value="7d">7 Days</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4 text-gray-400">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                            </svg>
                        </div>
                    </div>
                </div>

                <button type="submit"
                    class="w-full px-8 py-4 bg-white/10 text-white font-medium rounded-xl hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-300 hover-scale">
                    <i class="fas fa-link mr-2"></i>Shorten URL
                </button>
            </form>
        </div>
    </main>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black/80 backdrop-blur-md hidden items-center justify-center">
        <div class="glass-card rounded-2xl p-8 max-w-md w-full mx-4 fade-in">
            <h3 class="text-2xl font-bold gradient-text mb-4">Delete URL</h3>
            <p class="text-gray-400 mb-8">Are you sure you want to delete this URL? This action cannot be undone.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelDelete" class="px-6 py-3 text-gray-400 hover:text-white transition-colors duration-300">
                    Cancel
                </button>
                <button id="confirmDelete" class="px-6 py-3 bg-white/10 text-white rounded-xl hover:bg-white/20 transition-all duration-300">
                    Delete
                </button>
            </div>
        </div>
    </div>

    <!-- Delete All Confirmation Modal -->
    <div id="deleteAllModal" class="fixed inset-0 bg-black/80 backdrop-blur-md hidden items-center justify-center">
        <div class="glass-card rounded-2xl p-8 max-w-md w-full mx-4 fade-in">
            <h3 class="text-2xl font-bold gradient-text mb-4">Delete All URLs</h3>
            <p class="text-gray-400 mb-8">Are you sure you want to delete all your URLs? This action cannot be undone.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelDeleteAll" class="px-6 py-3 text-gray-400 hover:text-white transition-colors duration-300">
                    Cancel
                </button>
                <button id="confirmDeleteAll" class="px-6 py-3 bg-white/10 text-white rounded-xl hover:bg-white/20 transition-all duration-300">
                    Delete All
                </button>
            </div>
        </div>
    </div>

    <!-- Delete Account Confirmation Modal -->
    <div id="deleteAccountModal" class="fixed inset-0 bg-black/80 backdrop-blur-md hidden items-center justify-center">
        <div class="glass-card rounded-2xl p-8 max-w-md w-full mx-4 fade-in">
            <h3 class="text-2xl font-bold gradient-text mb-4">Delete Account</h3>
            <p class="text-gray-400 mb-8">Are you sure you want to delete your account? This action cannot be undone and all your URLs will be deleted.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelDeleteAccount" class="px-6 py-3 text-gray-400 hover:text-white transition-colors duration-300">
                    Cancel
                </button>
                <button id="confirmDeleteAccount" class="px-6 py-3 bg-white/10 text-white rounded-xl hover:bg-white/20 transition-all duration-300">
                    Delete Account
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <script>
        // Initialize particles.js with Playlist Studio inspired settings
        particlesJS('particles-js', {
            particles: {
                number: {
                    value: 120,
                    density: {
                        enable: true,
                        value_area: 800
                    }
                },
                color: {
                    value: '#00ff00'  // Bright green
                },
                shape: {
                    type: 'circle'
                },
                opacity: {
                    value: 0.8,
                    random: false,
                    anim: {
                        enable: false
                    }
                },
                size: {
                    value: 3,
                    random: true,
                    anim: {
                        enable: false
                    }
                },
                line_linked: {
                    enable: true,
                    distance: 150,
                    color: '#00ff00',  // Bright green
                    opacity: 0.6,
                    width: 1.5
                },
                move: {
                    enable: true,
                    speed: 2.5,
                    direction: 'none',
                    random: true,
                    straight: false,
                    out_mode: 'out',
                    bounce: false,
                    attract: {
                        enable: true,
                        rotateX: 600,
                        rotateY: 1200
                    }
                }
            },
            interactivity: {
                detect_on: 'canvas',
                events: {
                    onhover: {
                        enable: true,
                        mode: 'grab'
                    },
                    onclick: {
                        enable: true,
                        mode: 'push'
                    },
                    resize: true
                },
                modes: {
                    grab: {
                        distance: 140,
                        line_linked: {
                            opacity: 0.8
                        }
                    },
                    push: {
                        particles_nb: 4
                    }
                }
            },
            retina_detect: true
        });

        // Initialize snow particles
        particlesJS('snow-particles', {
            particles: {
                number: {
                    value: 100,
                    density: {
                        enable: true,
                        value_area: 800
                    }
                },
                color: {
                    value: '#ffffff'
                },
                shape: {
                    type: 'circle'
                },
                opacity: {
                    value: 0.5,
                    random: true,
                    anim: {
                        enable: true,
                        speed: 1,
                        opacity_min: 0.1,
                        sync: false
                    }
                },
                size: {
                    value: 2,
                    random: true,
                    anim: {
                        enable: true,
                        speed: 2,
                        size_min: 0.1,
                        sync: false
                    }
                },
                line_linked: {
                    enable: false
                },
                move: {
                    enable: true,
                    speed: 1,
                    direction: 'bottom',
                    random: true,
                    straight: false,
                    out_mode: 'out',
                    bounce: false,
                    attract: {
                        enable: true,
                        rotateX: 600,
                        rotateY: 1200
                    }
                }
            },
            interactivity: {
                detect_on: 'canvas',
                events: {
                    onhover: {
                        enable: true,
                        mode: 'bubble'
                    },
                    onclick: {
                        enable: true,
                        mode: 'push'
                    },
                    resize: true
                },
                modes: {
                    bubble: {
                        distance: 200,
                        size: 4,
                        duration: 2,
                        opacity: 0.8,
                        speed: 3
                    },
                    push: {
                        particles_nb: 4
                    }
                }
            },
            retina_detect: true
        });

        // Function to check and delete expired URLs
        function checkExpiredUrls() {
            const now = new Date();
            const urlRows = document.querySelectorAll('tr[data-expires-at]');
            
            urlRows.forEach(row => {
                const expiresAt = new Date(row.dataset.expiresAt);
                if (expiresAt < now) {
                    const urlId = row.dataset.urlId;
                    deleteUrl(urlId, true); // true indicates auto-delete
                }
            });
        }

        // Check for expired URLs every minute
        setInterval(checkExpiredUrls, 60000);
        // Initial check
        checkExpiredUrls();

        // Auto refresh the page every minute
        setInterval(() => {
            window.location.reload();
        }, 60000);

        function copyToClipboard(text) {
            const fullUrl = `${window.location.origin}/${text}`;
            navigator.clipboard.writeText(fullUrl).then(() => {
                alert('URL copied to clipboard!');
            }).catch(() => {
                alert('Failed to copy URL');
            });
        }

        // Delete URL functionality with modal
        let urlToDelete = null;

        function showDeleteModal(urlId) {
            urlToDelete = urlId;
            const modal = document.getElementById('deleteModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        function hideDeleteModal() {
            const modal = document.getElementById('deleteModal');
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            urlToDelete = null;
        }

        // Modal event listeners
        document.getElementById('cancelDelete').addEventListener('click', hideDeleteModal);
        document.getElementById('confirmDelete').addEventListener('click', () => {
            if (urlToDelete) {
                deleteUrl(urlToDelete);
                hideDeleteModal();
            }
        });

        // Close modal when clicking outside
        document.getElementById('deleteModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                hideDeleteModal();
            }
        });

        function deleteUrl(urlId, isAutoDelete = false) {
            if (isAutoDelete || urlId) {
                fetch(`/urls/${urlId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                }).then(response => {
                    if (response.ok) {
                        if (!isAutoDelete) {
                            window.location.reload();
                        } else {
                            // Remove the expired URL row without reloading
                            const row = document.querySelector(`tr[data-url-id="${urlId}"]`);
                            if (row) {
                                row.remove();
                                // Update stats
                                updateStats();
                            }
                        }
                    } else {
                        response.json().then(data => {
                            alert(data.message || 'Failed to delete URL');
                        }).catch(() => {
                            alert('Failed to delete URL');
                        });
                    }
                }).catch(() => {
                    if (!isAutoDelete) {
                        alert('Failed to delete URL');
                    }
                });
            }
        }

        function updateStats() {
            const totalUrls = document.querySelectorAll('tr[data-url-id]').length;
            const totalClicks = Array.from(document.querySelectorAll('tr[data-url-id]'))
                .reduce((sum, row) => sum + parseInt(row.dataset.clicks || 0), 0);
            const activeUrls = Array.from(document.querySelectorAll('tr[data-url-id]'))
                .filter(row => new Date(row.dataset.expiresAt) > new Date()).length;

            // Update stats in the UI
            document.querySelector('#total-urls').textContent = totalUrls;
            document.querySelector('#total-clicks').textContent = totalClicks;
            document.querySelector('#active-urls').textContent = activeUrls;
        }

        // Update the delete button click handlers
        document.querySelectorAll('button[onclick^="deleteUrl"]').forEach(button => {
            button.removeAttribute('onclick');
            button.addEventListener('click', () => {
                // Find the closest parent element that has the data-url-id attribute
                const urlId = button.closest('[data-url-id]')?.dataset?.urlId;
                if (urlId) {
                    showDeleteModal(urlId);
                }
            });
        });

        // Add URL form submission with loading state
        document.getElementById('urlForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            
            try {
                // Disable button and show loading state
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';
                
                const fullUrl = document.getElementById('fullUrl').value;
                const customShortCode = document.getElementById('customShortCode').value;
                const expiry = document.getElementById('expiry').value;

                const response = await fetch('/shorten', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fullUrl,
                        customShortCode: customShortCode || undefined,
                        expiry
                    })
                });

                if (response.ok) {
                    // Show success message
                    submitButton.innerHTML = '<i class="fas fa-check mr-2"></i>Created!';
                    submitButton.classList.remove('bg-white/10', 'hover:bg-white/20');
                    submitButton.classList.add('bg-green-600', 'hover:bg-green-700');
                    
                    // Reset form
                    e.target.reset();
                    
                    // Reload after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    const data = await response.json();
                    alert(data.error || 'Failed to create short URL');
                    // Reset button
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                }
            } catch (error) {
                alert('Failed to create short URL');
                // Reset button
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        });

        // Delete All functionality
        function showDeleteAllModal() {
            const modal = document.getElementById('deleteAllModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        function hideDeleteAllModal() {
            const modal = document.getElementById('deleteAllModal');
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }

        // Delete All modal event listeners
        document.getElementById('cancelDeleteAll').addEventListener('click', hideDeleteAllModal);
        document.getElementById('confirmDeleteAll').addEventListener('click', deleteAllUrls);

        // Close delete all modal when clicking outside
        document.getElementById('deleteAllModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                hideDeleteAllModal();
            }
        });

        async function deleteAllUrls() {
            try {
                const response = await fetch('/urls/delete-all', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                });

                if (response.ok) {
                    hideDeleteAllModal();
                    window.location.reload();
                } else {
                    const data = await response.json();
                    alert(data.error || 'Failed to delete all URLs');
                }
            } catch (error) {
                alert('Failed to delete all URLs');
            }
        }

        // Delete Account modal logic
        function showDeleteAccountModal() {
            const modal = document.getElementById('deleteAccountModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }
        function hideDeleteAccountModal() {
            const modal = document.getElementById('deleteAccountModal');
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }
        document.getElementById('cancelDeleteAccount').addEventListener('click', hideDeleteAccountModal);
        document.getElementById('confirmDeleteAccount').addEventListener('click', async () => {
            try {
                const res = await fetch('/auth/delete-account', { method: 'DELETE', credentials: 'same-origin' });
                if (res.ok) {
                    window.location.href = '/register';
                } else {
                    alert('Failed to delete account');
                }
            } catch {
                alert('Failed to delete account');
            }
        });
        document.getElementById('deleteAccountModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) hideDeleteAccountModal();
        });
    </script>
    <!-- Footer -->
    <footer class="fixed bottom-0 w-full py-4 text-center text-gray-400 text-sm z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <a href="https://github.com/rootds-coder" target="_blank" class="hover:text-white transition-colors duration-300">
                <i class="fab fa-github mr-2"></i>Created by @rootds-coder
            </a>
        </div>
    </footer>
</body>
</html> 