<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#000000">
    <title>Register - URL Shortener</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background: #000000;
            font-family: 'Inter', sans-serif;
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        .glass-input {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.3s ease;
        }
        .glass-input:focus {
            border-color: rgba(255, 255, 255, 0.2);
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
        }
        .btn-primary {
            background: rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .btn-primary:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-1px);
        }
        .btn-primary:active {
            transform: translateY(0);
        }
        .btn-primary::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }
        .btn-primary:focus:not(:active)::after {
            animation: ripple 1s ease-out;
        }
        @keyframes ripple {
            0% {
                transform: scale(0, 0);
                opacity: 0.5;
            }
            100% {
                transform: scale(20, 20);
                opacity: 0;
            }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Snow Animation */
        .snow {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
        .snowflake {
            position: absolute;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            filter: blur(1px);
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);
            animation: fall linear infinite;
        }
        @keyframes fall {
            0% {
                transform: translateY(-10px) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
    <div class="snow" id="snow"></div>
    <div class="glass-card p-8 rounded-2xl shadow-xl w-full max-w-sm fade-in">
        <h1 class="text-2xl font-bold mb-6 text-center text-white">Register</h1>
        
        <% if (typeof error !== 'undefined') { %>
            <div class="bg-red-500/10 border border-red-500/20 text-red-400 px-4 py-3 rounded-lg mb-4 text-sm">
                <%= error %>
            </div>
        <% } %>

        <form id="registerForm" action="/auth/register" method="POST" class="space-y-4">
            <div>
                <label class="block text-gray-400 text-sm font-medium mb-2" for="username">
                    Username
                </label>
                <input class="glass-input w-full py-3 px-4 text-white rounded-xl focus:outline-none"
                    id="username" type="text" name="username" required minlength="3" maxlength="30">
            </div>
            
            <div>
                <label class="block text-gray-400 text-sm font-medium mb-2" for="email">
                    Email
                </label>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                    <input class="glass-input w-full py-3 px-4 text-white rounded-xl focus:outline-none"
                        id="email" type="email" name="email" required>
                    <button type="button" id="sendOtpBtn" class="btn-primary text-white font-medium py-3 px-4 rounded-xl focus:outline-none focus:ring-2 focus:ring-white/20 whitespace-nowrap">
                        <i class="fas fa-paper-plane mr-2"></i>Send OTP
                    </button>
                </div>
                <p class="text-xs text-gray-400 mt-1">Only Gmail, Outlook, and Hotmail emails are allowed</p>
            </div>

            <div id="otpSection" class="hidden">
                <label class="block text-gray-400 text-sm font-medium mb-2" for="otp">
                    OTP
                </label>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                    <input class="glass-input w-full py-3 px-4 text-white rounded-xl focus:outline-none"
                        id="otp" type="text" name="otp" required pattern="[0-9]{6}" maxlength="6">
                    <button type="button" id="verifyOtpBtn" class="btn-primary text-white font-medium py-3 px-4 rounded-xl focus:outline-none focus:ring-2 focus:ring-white/20 whitespace-nowrap">
                        <i class="fas fa-check mr-2"></i>Verify
                    </button>
                </div>
            </div>
            
            <div>
                <label class="block text-gray-400 text-sm font-medium mb-2" for="password">
                    Password
                </label>
                <input class="glass-input w-full py-3 px-4 text-white rounded-xl focus:outline-none"
                    id="password" type="password" name="password" required minlength="6">
            </div>

            <div>
                <label class="block text-gray-400 text-sm font-medium mb-2" for="secretCode">
                    Secret Code
                </label>
                <input class="glass-input w-full py-3 px-4 text-white rounded-xl focus:outline-none"
                    id="secretCode" type="text" name="secretCode" required>
                <p class="text-xs text-gray-400 mt-1">Please enter the secret code to register</p>
            </div>

            <div class="flex items-center justify-between">
                <button class="btn-primary text-white font-medium py-3 px-4 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-white/20"
                    type="submit" id="submitBtn" disabled>
                    <i class="fas fa-user-plus mr-2"></i>Register
                </button>
            </div>
        </form>

        <div class="mt-6 text-center">
            <p class="text-sm text-gray-400">
                Already have an account? 
                <a href="/login" class="text-white hover:text-gray-300 transition duration-150 ease-in-out">Login here</a>
            </p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const emailInput = document.getElementById('email');
            const sendOtpBtn = document.getElementById('sendOtpBtn');
            const otpSection = document.getElementById('otpSection');
            const otpInput = document.getElementById('otp');
            const verifyOtpBtn = document.getElementById('verifyOtpBtn');
            const submitBtn = document.getElementById('submitBtn');
            const registerForm = document.getElementById('registerForm');
            const secretCodeInput = document.getElementById('secretCode');

            // Disable form submission until OTP is verified and secret code is correct
            submitBtn.disabled = true;

            // Send OTP with mobile support
            sendOtpBtn.addEventListener('click', async function() {
                const email = emailInput.value;
                if (!email) {
                    alert('Please enter your email first');
                    return;
                }

                try {
                    sendOtpBtn.disabled = true;
                    sendOtpBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending...';
                    
                    const response = await fetch('/auth/send-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email })
                    });

                    const data = await response.json();
                    
                    if (response.ok) {
                        alert('OTP sent successfully! Please check your email.');
                        otpSection.classList.remove('hidden');
                        // Focus on OTP input after it becomes visible
                        setTimeout(() => {
                            otpInput.focus();
                        }, 100);
                    } else {
                        alert(data.error || 'Error sending OTP');
                    }
                } catch (error) {
                    alert('Error sending OTP');
                } finally {
                    sendOtpBtn.disabled = false;
                    sendOtpBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Send OTP';
                }
            });

            // Verify OTP
            verifyOtpBtn.addEventListener('click', async function() {
                const email = emailInput.value;
                const otp = otpInput.value;

                if (!email || !otp) {
                    alert('Please enter both email and OTP');
                    return;
                }

                try {
                    verifyOtpBtn.disabled = true;
                    verifyOtpBtn.textContent = 'Verifying...';
                    
                    const response = await fetch('/auth/verify-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email, otp })
                    });

                    const data = await response.json();
                    
                    if (response.ok) {
                        alert('OTP verified successfully!');
                        otpInput.readOnly = true;
                        verifyOtpBtn.disabled = true;
                        // Only enable submit if secret code is also correct
                        if (secretCodeInput.value === '<%= process.env.SECRET_CODE %>') {
                            submitBtn.disabled = false;
                        }
                    } else {
                        alert(data.error || 'Invalid OTP');
                    }
                } catch (error) {
                    alert('Error verifying OTP');
                } finally {
                    verifyOtpBtn.disabled = false;
                    verifyOtpBtn.textContent = 'Verify';
                }
            });

            // Form submission with improved mobile support
            registerForm.addEventListener('submit', function(e) {
                if (submitBtn.disabled) {
                    e.preventDefault();
                    alert('Please verify your email with OTP first and enter the correct secret code');
                    return;
                }
                if (secretCodeInput.value !== '<%= process.env.SECRET_CODE %>') {
                    e.preventDefault();
                    alert('Invalid secret code');
                    return;
                }
            });

            // Add touch event support for mobile
            const addTouchSupport = (element) => {
                element.addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    this.click();
                }, { passive: false });
            };

            // Add touch support to buttons
            addTouchSupport(sendOtpBtn);
            addTouchSupport(verifyOtpBtn);
            addTouchSupport(submitBtn);

            // Update secret code validation to enable submit button
            secretCodeInput.addEventListener('input', function() {
                if (this.value === '<%= process.env.SECRET_CODE %>') {
                    this.classList.remove('border-red-700');
                    this.classList.add('border-green-700');
                    // Enable submit button if OTP is verified
                    if (otpInput.readOnly) {
                        submitBtn.disabled = false;
                    }
                } else {
                    this.classList.remove('border-green-700');
                    this.classList.add('border-red-700');
                    submitBtn.disabled = true;
                }
            });
        });

        // Snow Animation
        function createSnowflake() {
            const snow = document.getElementById('snow');
            const snowflake = document.createElement('div');
            snowflake.classList.add('snowflake');
            
            // Random size between 2px and 4px
            const size = Math.random() * 2 + 2;
            snowflake.style.width = `${size}px`;
            snowflake.style.height = `${size}px`;
            
            // Random position
            snowflake.style.left = `${Math.random() * 100}%`;
            
            // Random animation duration between 5s and 10s
            const duration = Math.random() * 5 + 5;
            snowflake.style.animationDuration = `${duration}s`;
            
            snow.appendChild(snowflake);
            
            // Remove snowflake after animation
            setTimeout(() => {
                snowflake.remove();
            }, duration * 1000);
        }

        // Create snowflakes continuously
        setInterval(createSnowflake, 200);
    </script>
</body>
</html> 
